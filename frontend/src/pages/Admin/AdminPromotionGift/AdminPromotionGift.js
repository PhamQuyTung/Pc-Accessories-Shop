import React, { useEffect, useState } from 'react';
import axiosClient from '~/utils/axiosClient';
import classNames from 'classnames/bind';
import styles from './AdminPromotionGift.module.scss';
import Select from 'react-select';

const cx = classNames.bind(styles);

function AdminPromotionGift() {
    const [promotions, setPromotions] = useState([]);
    const [products, setProducts] = useState([]);
    const [editId, setEditId] = useState(null);
    const [showModal, setShowModal] = useState(false);
    const [modalList, setModalList] = useState([]);
    const [modalTitle, setModalTitle] = useState('');
    const [expandedRowId, setExpandedRowId] = useState(null);
    const [expandedList, setExpandedList] = useState([]);
    const [expandedTitle, setExpandedTitle] = useState('');

    const [isClosing, setIsClosing] = useState(false);

    const [newPromo, setNewPromo] = useState({
        title: '',
        description: '',
        discountType: 'percent',
        discountValue: 0,
        conditionProducts: [],
        relatedProducts: [],
        link: '',
    });

    useEffect(() => {
        fetchPromotions();
        fetchProducts();
    }, []);

    const fetchPromotions = async () => {
        try {
            const res = await axiosClient.get('/promotion-gifts');
            setPromotions(res.data || []);
        } catch (err) {
            console.error('L·ªói khi l·∫•y danh s√°ch khuy·∫øn m√£i:', err);
        }
    };

    const fetchProducts = async () => {
        try {
            let allProducts = [];
            let currentPage = 1;
            let totalPages = 1;

            do {
                const res = await axiosClient.get(`/products?page=${currentPage}`);
                const { products, totalPages: total } = res.data;
                allProducts = [...allProducts, ...(products || [])];
                totalPages = total;
                currentPage++;
            } while (currentPage <= totalPages);

            setProducts(allProducts);
        } catch (err) {
            console.error('L·ªói khi l·∫•y to√†n b·ªô s·∫£n ph·∫©m:', err);
            setProducts([]);
        }
    };

    const handleSubmit = async () => {
        try {
            if (editId) {
                await axiosClient.patch(`/promotion-gifts/${editId}`, newPromo);
                alert('‚úÖ ƒê√£ c·∫≠p nh·∫≠t khuy·∫øn m√£i th√†nh c√¥ng!');
            } else {
                await axiosClient.post('/promotion-gifts', newPromo);
                alert('‚úÖ ƒê√£ th√™m khuy·∫øn m√£i m·ªõi!');
            }

            setNewPromo({
                title: '',
                description: '',
                discountType: 'percent',
                discountValue: 0,
                conditionProducts: [],
                relatedProducts: [],
                link: '',
            });
            setEditId(null);
            fetchPromotions();
        } catch (err) {
            console.error('L·ªói khi l∆∞u khuy·∫øn m√£i:', err);
            alert('‚ö†Ô∏è L·ªói khi l∆∞u khuy·∫øn m√£i.');
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a khuy·∫øn m√£i n√†y?')) {
            try {
                await axiosClient.delete(`/promotion-gifts/${id}`);
                fetchPromotions();
                alert('üóëÔ∏è ƒê√£ x√≥a khuy·∫øn m√£i th√†nh c√¥ng!');
            } catch (err) {
                console.error('L·ªói khi x√≥a:', err);
                alert('‚ö†Ô∏è X√≥a th·∫•t b·∫°i!');
            }
        }
    };

    const handleEdit = (promo) => {
        setNewPromo({
            title: promo.title,
            description: promo.description,
            discountType: promo.discountType,
            discountValue: promo.discountValue,
            conditionProducts: (promo.conditionProducts || []).map((p) => p._id || p),
            relatedProducts: (promo.relatedProducts || []).map((p) => p._id || p),
            link: promo.link || '',
        });
        setEditId(promo._id);
    };

    const handleCancelEdit = () => {
        setNewPromo({
            title: '',
            description: '',
            discountType: 'percent',
            discountValue: 0,
            conditionProducts: [],
            relatedProducts: [],
            link: '',
        });
        setEditId(null);
    };

    const productOptions = products.map((p) => ({
        value: p._id,
        label: p.name,
    }));

    const handleToggleExpand = (promoId, columnKey, list) => {
        const isExpanded = expandedRowId === promoId && expandedTitle === columnKey;

        if (isExpanded) {
            // ch·∫°y hi·ªáu ·ª©ng ·∫©n tr∆∞·ªõc
            setIsClosing(true);
            setTimeout(() => {
                setExpandedRowId(null);
                setExpandedTitle('');
                setExpandedList([]);
                setIsClosing(false);
            }, 200); // tr√πng v·ªõi th·ªùi gian animation fadeOut
        } else {
            setExpandedRowId(promoId);
            setExpandedTitle(columnKey);
            setExpandedList(list.slice(3));
        }
    };

    const renderProductList = (list = [], promoId, columnKey) => {
        if (!Array.isArray(list) || list.length === 0) return '‚Äî';

        const shown = list.slice(0, 3);
        const hidden = list.length - shown.length;
        const isExpanded = expandedRowId === promoId && expandedTitle === columnKey;

        return (
            <div className={cx('product-cell')}>
                <ul className={cx('compact-list')}>
                    {shown.map((p, i) => (
                        <li key={i}>{p.name || p._id}</li>
                    ))}
                </ul>

                {hidden > 0 && (
                    <button className={cx('more')} onClick={() => handleToggleExpand(promoId, columnKey, list)}>
                        {isExpanded ? '·∫®n b·ªõt ‚ñ≤' : `+${hidden}`}
                    </button>
                )}

                {isExpanded && (
                    <ul className={cx('dropdown-list', { closing: isClosing })}>
                        {expandedList.map((p, i) => (
                            <li key={i}>{p.name || p._id}</li>
                        ))}
                    </ul>
                )}
            </div>
        );
    };

    return (
        <div className={cx('wrap')}>
            <h2 className={cx('title')}>üéÅ Qu·∫£n l√Ω khuy·∫øn m√£i qu√† t·∫∑ng</h2>

            {/* Form khuy·∫øn m√£i */}
            <div className={cx('card')}>
                <div className={cx('form-group')}>
                    <label>Ti√™u ƒë·ªÅ khuy·∫øn m√£i</label>
                    <input
                        type="text"
                        value={newPromo.title}
                        onChange={(e) => setNewPromo({ ...newPromo, title: e.target.value })}
                        placeholder="Nh·∫≠p ti√™u ƒë·ªÅ..."
                    />
                </div>

                <div className={cx('form-group')}>
                    <label>M√¥ t·∫£ chi ti·∫øt</label>
                    <textarea
                        value={newPromo.description}
                        onChange={(e) => setNewPromo({ ...newPromo, description: e.target.value })}
                        placeholder="M√¥ t·∫£ khuy·∫øn m√£i..."
                    />
                </div>

                <div className={cx('row')}>
                    <div className={cx('form-group')}>
                        <label>Lo·∫°i gi·∫£m gi√°</label>
                        <select
                            value={newPromo.discountType}
                            onChange={(e) => setNewPromo({ ...newPromo, discountType: e.target.value })}
                        >
                            <option value="percent">Gi·∫£m theo %</option>
                            <option value="amount">Gi·∫£m theo s·ªë ti·ªÅn</option>
                        </select>
                    </div>

                    <div className={cx('form-group')}>
                        <label>Gi√° tr·ªã gi·∫£m</label>
                        <input
                            type="number"
                            value={newPromo.discountValue}
                            onChange={(e) => setNewPromo({ ...newPromo, discountValue: e.target.value })}
                        />
                    </div>
                </div>

                <div className={cx('form-group')}>
                    <label>S·∫£n ph·∫©m ch√≠nh</label>
                    <Select
                        isMulti
                        options={productOptions}
                        value={productOptions.filter((opt) => newPromo.conditionProducts.includes(opt.value))}
                        onChange={(selected) =>
                            setNewPromo({
                                ...newPromo,
                                conditionProducts: selected.map((s) => s.value),
                            })
                        }
                        placeholder="Ch·ªçn s·∫£n ph·∫©m ch√≠nh..."
                    />
                </div>

                <div className={cx('form-group')}>
                    <label>S·∫£n ph·∫©m mua k√®m</label>
                    <Select
                        isMulti
                        options={productOptions}
                        value={productOptions.filter((opt) => newPromo.relatedProducts.includes(opt.value))}
                        onChange={(selected) =>
                            setNewPromo({
                                ...newPromo,
                                relatedProducts: selected.map((s) => s.value),
                            })
                        }
                        placeholder="Ch·ªçn s·∫£n ph·∫©m mua k√®m..."
                    />
                </div>

                <div className={cx('actions')}>
                    <button className={cx('btn', 'btn-primary')} onClick={handleSubmit}>
                        {editId ? 'üíæ L∆∞u thay ƒë·ªïi' : '‚ûï Th√™m khuy·∫øn m√£i'}
                    </button>
                    {editId && (
                        <button className={cx('btn', 'btn-secondary')} onClick={handleCancelEdit}>
                            ‚ùå H·ªßy
                        </button>
                    )}
                </div>
            </div>

            {/* Danh s√°ch khuy·∫øn m√£i */}
            <div className={cx('list-card')}>
                <h3>Danh s√°ch khuy·∫øn m√£i</h3>
                <div className={cx('table-wrapper')}>
                    <table className={cx('table')}>
                        <thead>
                            <tr>
                                <th>Ti√™u ƒë·ªÅ</th>
                                <th>Gi·∫£m</th>
                                <th>M√¥ t·∫£</th>
                                <th>S·∫£n ph·∫©m ch√≠nh</th>
                                <th>S·∫£n ph·∫©m mua k√®m</th>
                                <th>H√†nh ƒë·ªông</th>
                            </tr>
                        </thead>

                        <tbody>
                            {promotions.map((promo) => (
                                <tr key={promo._id}>
                                    <td>{promo.title}</td>
                                    <td>
                                        {promo.discountType === 'percent'
                                            ? `${promo.discountValue}%`
                                            : `${promo.discountValue.toLocaleString('vi-VN')}‚Ç´`}
                                    </td>
                                    <td>{promo.description || '‚Äî'}</td>
                                    <td>{renderProductList(promo.conditionProducts, promo._id, 'main')}</td>
                                    <td>{renderProductList(promo.relatedProducts, promo._id, 'related')}</td>
                                    <td className={cx('table-actions')}>
                                        <button onClick={() => handleEdit(promo)} title="S·ª≠a">
                                            ‚úèÔ∏è
                                        </button>
                                        <button onClick={() => handleDelete(promo._id)} title="X√≥a">
                                            üóëÔ∏è
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>

            {showModal && (
                <div className={cx('modal-overlay')} onClick={() => setShowModal(false)}>
                    <div className={cx('modal-content')} onClick={(e) => e.stopPropagation()}>
                        <h4>{modalTitle}</h4>
                        <ul className={cx('modal-list')}>
                            {modalList.map((p, i) => (
                                <li key={i}>
                                    <span>{p.name || p._id}</span>
                                </li>
                            ))}
                        </ul>
                        <button className={cx('btn-close')} onClick={() => setShowModal(false)}>
                            ƒê√≥ng
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
}

export default AdminPromotionGift;
