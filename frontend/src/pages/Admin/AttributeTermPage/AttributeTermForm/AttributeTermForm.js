import React, { useState, useEffect } from 'react';
import styles from './AttributeTermForm.module.scss';
import classNames from 'classnames/bind';

const cx = classNames.bind(styles);

export default function AttributeTermForm({
    initialData = null,
    onSubmit,
    onClose,
    loading,
    resetTrigger,
    attributeType, // <-- TH√äM D√íNG N√ÄY
}) {
    console.log('üí° attributeType:', attributeType); // n√™n log ƒë·ªÉ ch·∫Øc ch·∫Øn
    const [name, setName] = useState('');
    const [slug, setSlug] = useState('');
    const [color, setColor] = useState('#000000');
    const [imageUrl, setImageUrl] = useState('');

    useEffect(() => {
        if (initialData) {
            setName(initialData.name || '');
            setSlug(initialData.slug || '');
            setColor(initialData.color || '#000000');
            setImageUrl(initialData.image || '');
        }
    }, [initialData]);

    useEffect(() => {
        if (!initialData) {
            setName('');
            setSlug('');
            setColor('#000000');
            setImageUrl('');
        }
    }, [resetTrigger]);

    const handleSubmit = (e) => {
        console.log('üß© Term data tr∆∞·ªõc khi t·∫°o:', {
            attributeType,
            name,
            slug,
            color,
            imageUrl,
        });

        e.preventDefault();

        const trimmedName = String(name).trim();
        const trimmedSlug = String(slug).trim();

        if (!trimmedName || !trimmedSlug) {
            alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n v√† slug.');
            return;
        }

        const payload = {
            name: trimmedName,
            slug: trimmedSlug,
        };

        console.log('üì§ Payload g·ª≠i server:', payload);

        if (attributeType === 'color') {
            payload.color = color; // üëà FIXED
        }

        if (attributeType === 'image') {
            payload.image = imageUrl; // üëà FIXED (n·∫øu backend d√πng `image`, kh√¥ng ph·∫£i `imageUrl`)
        }

        onSubmit(payload);
    };

    return (
        <div className={cx('form-wrapper')}>
            <form className={cx('form')} onSubmit={handleSubmit}>
                <div className={cx('form-group')}>
                    <label htmlFor="name">
                        T√™n ch·ªßng lo·∫°i <span className={cx('required')}>*</span>
                    </label>
                    <input
                        type="text"
                        id="name"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        placeholder="V√≠ d·ª•: ƒêen, Tr·∫Øng, 16GB, i5..."
                        required
                    />
                </div>

                <div className={cx('form-group')}>
                    <label htmlFor="slug">
                        ƒê∆∞·ªùng d·∫´n (slug) <span className={cx('required')}>*</span>
                    </label>
                    <input
                        type="text"
                        id="slug"
                        value={slug}
                        onChange={(e) => setSlug(e.target.value)}
                        placeholder="vi-du: den, trang, 16gb..."
                        required
                    />
                </div>

                {/* N·∫øu l√† color th√¨ hi·ªÉn th·ªã tr∆∞·ªùng ch·ªçn m√†u */}
                {attributeType === 'color' && (
                    <div className={cx('form-group')}>
                        <label htmlFor="color">M√†u s·∫Øc</label>
                        <input
                            type="color"
                            value={color}
                            onChange={(e) => {
                                setColor(e.target.value);
                                console.log('üé® Color selected:', e.target.value);
                            }}
                        />
                    </div>
                )}

                {/* N·∫øu l√† image th√¨ hi·ªÉn th·ªã tr∆∞·ªùng nh·∫≠p link h√¨nh ·∫£nh (c√≥ th·ªÉ sau n√†y ƒë·ªïi sang upload file) */}
                {attributeType === 'image' && (
                    <div className={cx('form-group')}>
                        <label htmlFor="image">Link h√¨nh ·∫£nh</label>
                        <input
                            type="text"
                            id="image"
                            value={imageUrl}
                            onChange={(e) => setImageUrl(e.target.value)}
                            placeholder="Nh·∫≠p URL h√¨nh ·∫£nh ho·∫∑c link t·ª´ CDN"
                        />
                        {imageUrl && (
                            <img
                                src={imageUrl}
                                alt="Xem tr∆∞·ªõc"
                                className={cx('preview')}
                                style={{ maxWidth: '100px', marginTop: '8px' }}
                            />
                        )}
                    </div>
                )}

                <div className={cx('form-actions')}>
                    <button type="submit" disabled={loading}>
                        {loading ? 'ƒêang l∆∞u...' : initialData ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
                    </button>
                    <button type="button" className={cx('cancel-btn')} onClick={onClose}>
                        H·ªßy
                    </button>
                </div>
            </form>
        </div>
    );
}
