import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import classNames from 'classnames/bind';
import styles from './OrderDetail.module.scss';
import axios from 'axios';

const cx = classNames.bind(styles);

const orderStages = [
    'Ti·∫øp nh·∫≠n ƒë∆°n h√†ng',
    'X√°c nh·∫≠n ƒë∆°n h√†ng',
    'Chu·∫©n b·ªã h√†ng h√≥a',
    'ƒê√≥ng g√≥i',
    'V·∫≠n chuy·ªÉn v√† giao h√†ng',
    'X·ª≠ l√Ω thanh to√°n',
    'X·ª≠ l√Ω ƒë·ªïi tr·∫£ (n·∫øu c√≥)',
];

const OrderDetail = () => {
    const { id } = useParams();
    const [order, setOrder] = useState(null);
    const [loading, setLoading] = useState(true);

    const [newStatus, setNewStatus] = useState('');
    const [updating, setUpdating] = useState(false);

    useEffect(() => {
        const fetchOrder = async () => {
            try {
                const res = await axios.get(`/api/orders/${id}`, {
                    headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
                });
                setOrder(res.data.order);
                setNewStatus(res.data.order.status); // üëà c·∫≠p nh·∫≠t sau khi c√≥ order
            } catch (err) {
                console.error('L·ªói khi l·∫•y ƒë∆°n h√†ng:', err);
            } finally {
                setLoading(false);
            }
        };
        fetchOrder();
    }, [id]);

    const handleUpdateStatus = async () => {
        try {
            setUpdating(true);
            const res = await axios.patch(
                `/api/orders/${order._id}/status`,
                { status: newStatus },
                { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } },
            );
            setOrder(res.data.order);
            alert('C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!');
        } catch (err) {
            console.error('L·ªói c·∫≠p nh·∫≠t:', err);
            alert('C·∫≠p nh·∫≠t th·∫•t b·∫°i!');
        } finally {
            setUpdating(false);
        }
    };

    if (loading) return <p>ƒêang t·∫£i...</p>;
    if (!order) return <p>Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng</p>;

    let currentStageIndex = 0;
    if (order.status === 'new') currentStageIndex = 1;
    if (order.status === 'processing') currentStageIndex = 3;
    if (order.status === 'shipping') currentStageIndex = 4;
    if (order.status === 'completed') currentStageIndex = 6;
    if (order.status === 'cancelled') currentStageIndex = 1;

    return (
        <div className={cx('order-detail')}>
            <div className={cx('header')}>
                <h1>Chi ti·∫øt ƒë∆°n h√†ng #{order._id.slice(-6)}</h1>
                <span className={cx('status', order.status)}>{order.status}</span>
            </div>
            <p className={cx('date')}>Ng√†y ƒë·∫∑t: {new Date(order.createdAt).toLocaleDateString('vi-VN')}</p>

            {/* Th√¥ng tin kh√°ch h√†ng */}
            <div className={cx('info-section')}>
                <div className={cx('box')}>
                    <h3>Th√¥ng tin thanh to√°n</h3>
                    <p>
                        <strong>H·ªç t√™n:</strong> {order.shippingInfo?.name}
                    </p>
                    <p>
                        <strong>SƒêT:</strong> {order.shippingInfo?.phone}
                    </p>
                    <p>
                        <strong>ƒê·ªãa ch·ªâ:</strong> {order.shippingInfo?.address}
                    </p>
                </div>
            </div>

            {/* Timeline */}
            <div className={cx('timeline')}>
                <h3>Ho·∫°t ƒë·ªông ƒë∆°n h√†ng</h3>
                <ul>
                    {orderStages.map((stage, index) => (
                        <li
                            key={index}
                            className={cx('timeline-item', {
                                done: index < currentStageIndex,
                                current: index === currentStageIndex,
                                pending: index > currentStageIndex,
                            })}
                        >
                            <span className={cx('step')}>{index + 1}</span>
                            <span className={cx('text')}>{stage}</span>
                        </li>
                    ))}
                </ul>
            </div>

            {/* S·∫£n ph·∫©m */}
            <div className={cx('products')}>
                <h3>S·∫£n ph·∫©m</h3>
                <table>
                    <thead>
                        <tr>
                            <th>S·∫£n ph·∫©m</th>
                            <th className={cx('text-center')}>S·ªë l∆∞·ª£ng</th>
                            <th className={cx('text-right')}>ƒê∆°n gi√°</th>
                            <th className={cx('text-right')}>Th√†nh ti·ªÅn</th>
                        </tr>
                    </thead>
                    <tbody>
                        {order.items.map((item) => {
                            const product = item.product_id;
                            const imageUrl = product?.images?.length > 0 ? product.images[0] : '/no-image.png'; // ·∫£nh fallback n·∫øu kh√¥ng c√≥
                            return (
                                <tr key={item._id}>
                                    <td className={cx('product-cell')}>
                                        <img src={imageUrl} alt={product?.name} className={cx('product-img')} />
                                        <Link to={`/products/${product.slug}`}>{product?.name}</Link>
                                    </td>
                                    <td className={cx('text-center')}>{item.quantity}</td>
                                    <td className={cx('text-right')}>{item.price.toLocaleString('vi-VN')} ‚Ç´</td>
                                    <td className={cx('text-right')}>
                                        {(item.price * item.quantity).toLocaleString('vi-VN')} ‚Ç´
                                    </td>
                                </tr>
                            );
                        })}
                    </tbody>
                </table>
            </div>

            {/* T·ªïng c·ªông */}
            <div className={cx('totals')}>
                <p>
                    <span>T·∫°m t√≠nh:</span> <strong>{order.subtotal.toLocaleString('vi-VN')} ‚Ç´</strong>
                </p>
                <p>
                    <span>Thu·∫ø (VAT):</span> <strong>{order.tax.toLocaleString('vi-VN')} ‚Ç´</strong>
                </p>
                <p>
                    <span>Ph√≠ d·ªãch v·ª•:</span> <strong>{order.serviceFee.toLocaleString('vi-VN')} ‚Ç´</strong>
                </p>
                <p>
                    <span>Ph√≠ v·∫≠n chuy·ªÉn:</span> <strong>{order.shippingFee.toLocaleString('vi-VN')} ‚Ç´</strong>
                </p>
                <p>
                    <span>Gi·∫£m gi√°:</span> <strong>{order.discount.toLocaleString('vi-VN')} ‚Ç´</strong>
                </p>
                <p className={cx('grand-total')}>
                    <span>T·ªïng c·ªông:</span> <strong>{order.finalAmount.toLocaleString('vi-VN')} ‚Ç´</strong>
                </p>
            </div>

            {/* Action buttons */}
            <div className={cx('actions')}>
                <select
                    value={newStatus}
                    onChange={(e) => setNewStatus(e.target.value)}
                    className={cx('status-select')}
                >
                    <option value="new">M·ªõi</option>
                    <option value="processing">ƒêang x·ª≠ l√Ω</option>
                    <option value="shipping">ƒêang giao</option>
                    <option value="completed">Ho√†n th√†nh</option>
                    <option value="cancelled">ƒê√£ h·ªßy</option>
                </select>

                <button onClick={handleUpdateStatus} className={cx('btn', 'update')} disabled={updating}>
                    {updating ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t tr·∫°ng th√°i'}
                </button>

                <button className={cx('btn', 'print')}>In h√≥a ƒë∆°n</button>
                <button className={cx('btn', 'delete')}>X√≥a ƒë∆°n h√†ng</button>
                <Link to="/admin/orders" className={cx('btn', 'back')}>
                    ‚Üê Quay l·∫°i
                </Link>
            </div>
        </div>
    );
};

export default OrderDetail;
