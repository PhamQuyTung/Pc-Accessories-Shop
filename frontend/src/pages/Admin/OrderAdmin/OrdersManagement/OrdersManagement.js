import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { Eye, Pencil, Trash2, Filter } from 'lucide-react';
import classNames from 'classnames/bind';
import styles from './OrdersManagement.module.scss';
import axios from 'axios';
import Pagination from '~/components/Pagination/Pagination';
import { useToast } from '~/components/ToastMessager/ToastMessager';

const cx = classNames.bind(styles);

const tabList = [
    { key: 'all', label: 'T·∫•t c·∫£' },
    { key: 'new', label: 'M·ªõi' },
    { key: 'processing', label: 'ƒêang x·ª≠ l√Ω' },
    { key: 'shipping', label: 'ƒêang giao' },
    { key: 'completed', label: 'Ho√†n th√†nh' },
    { key: 'cancelled', label: 'ƒê√£ h·ªßy' },
];

const initialFilters = {
    search: '',
    startDate: '',
    endDate: '',
    minAmount: '',
    maxAmount: '',
    paymentMethod: '',
    status: 'all',
};

const OrdersManagement = () => {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);

    const [filters, setFilters] = useState(initialFilters);
    const [showFilter, setShowFilter] = useState(false);

    const [sortField, setSortField] = useState('createdAt');
    const [sortOrder, setSortOrder] = useState('desc');

    // Ph√¢n trang
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [limit] = useState(5);

    const showToast = useToast();

    // T·∫£i d·ªØ li·ªáu
    useEffect(() => {
        const fetchOrders = async () => {
            setLoading(true);
            try {
                const res = await axios.get('/api/orders/all', {
                    headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
                    params: {
                        page: currentPage,
                        limit,
                        sortField,
                        sortOrder,
                        ...filters,
                        status: filters.status === 'all' ? '' : filters.status,
                    },
                });

                setOrders(res.data.orders || []);
                setTotalPages(res.data.totalPages || 1);
            } catch (err) {
                console.error('L·ªói khi t·∫£i ƒë∆°n h√†ng:', err);
            } finally {
                setLoading(false);
            }
        };

        fetchOrders();
    }, [currentPage, sortField, sortOrder, filters, limit]);

    // üîπ H√†m reset b·ªô l·ªçc
    const handleResetFilters = () => {
        setFilters(initialFilters);
        setCurrentPage(1); // reset v·ªÅ trang 1
        showToast('ƒê√£ x√≥a b·ªô l·ªçc!', 'success'); // ‚úÖ Toast b√°o
    };

    // X·ª≠ l√Ω x√≥a ƒë∆°n h√†ng
    const handleDelete = async (orderId) => {
        if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë∆°n h√†ng n√†y?')) return;
        try {
            await axios.delete(`/api/orders/${orderId}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
            });
            setOrders((prev) => prev.filter((o) => o._id !== orderId));
            showToast("X√≥a ƒë∆°n h√†ng th√†nh c√¥ng!", "success");
        } catch (err) {
            console.error('L·ªói khi x√≥a ƒë∆°n h√†ng:', err);
            showToast("X√≥a ƒë∆°n h√†ng th·∫•t b·∫°i!", "error"); 
        }
    };

    return (
        <div className={cx('orders-page')}>
            {/* Header */}
            <div className={cx('header')}>
                <h1 className={cx('title')}>Qu·∫£n l√Ω ƒë∆°n h√†ng</h1>
                <Link to="/admin/orders/create" className={cx('btn', 'create')}>
                    ‚ûï T·∫°o ƒë∆°n h√†ng
                </Link>
            </div>

            {/* Tabs */}
            <div className={cx('tabs')}>
                {tabList.map((tab) => (
                    <button
                        key={tab.key}
                        className={cx('tab-btn', { active: filters.status === tab.key })}
                        onClick={() => setFilters({ ...filters, status: tab.key })}
                    >
                        {tab.label}
                    </button>
                ))}
            </div>

            {/* Thanh t√¨m ki·∫øm & l·ªçc */}
            <div className={cx('filters')}>
                <input
                    type="text"
                    placeholder="T√¨m theo t√™n ho·∫∑c m√£ ƒë∆°n..."
                    value={filters.search}
                    onChange={(e) => setFilters({ ...filters, search: e.target.value })}
                />
                <input
                    type="date"
                    value={filters.startDate}
                    onChange={(e) => setFilters({ ...filters, startDate: e.target.value })}
                />
                <span>ƒë·∫øn</span>
                <input
                    type="date"
                    value={filters.endDate}
                    onChange={(e) => setFilters({ ...filters, endDate: e.target.value })}
                />

                <button type="button" className={cx('btn', 'filter-toggle')} onClick={() => setShowFilter(!showFilter)}>
                    <Filter size={16} />
                    {showFilter ? '·∫®n l·ªçc' : 'L·ªçc n√¢ng cao'}
                </button>

                {/* ‚úÖ N√∫t X√≥a b·ªô l·ªçc */}
                <button type="button" className={cx('btn', 'reset')} onClick={handleResetFilters}>
                    ‚ùå X√≥a b·ªô l·ªçc
                </button>
            </div>

            {/* Panel l·ªçc n√¢ng cao */}
            {showFilter && (
                <div className={cx('advanced-filters')}>
                    <label>
                        T·ª´ s·ªë ti·ªÅn:
                        <input
                            type="number"
                            value={filters.minAmount}
                            onChange={(e) => setFilters({ ...filters, minAmount: e.target.value })}
                        />
                    </label>
                    <label>
                        ƒê·∫øn s·ªë ti·ªÅn:
                        <input
                            type="number"
                            value={filters.maxAmount}
                            onChange={(e) => setFilters({ ...filters, maxAmount: e.target.value })}
                        />
                    </label>
                    <label>
                        Ph∆∞∆°ng th·ª©c thanh to√°n:
                        <select
                            value={filters.paymentMethod}
                            onChange={(e) => setFilters({ ...filters, paymentMethod: e.target.value })}
                        >
                            <option value="">-- T·∫•t c·∫£ --</option>
                            <option value="cod">COD</option>
                            <option value="bank">Chuy·ªÉn kho·∫£n</option>
                        </select>
                    </label>
                </div>
            )}

            {/* Thanh s·∫Øp x·∫øp */}
            <div className={cx('sort-bar')}>
                <label>S·∫Øp x·∫øp theo:</label>
                <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                    <option value="createdAt">Ng√†y ƒë·∫∑t</option>
                    <option value="orderId">M√£ ƒë∆°n</option>
                    <option value="name">T√™n kh√°ch h√†ng</option>
                    <option value="finalAmount">Gi√° ti·ªÅn</option>
                </select>
                <button onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')} className={cx('sort-order')}>
                    {sortOrder === 'asc' ? '‚¨Ü TƒÉng d·∫ßn' : '‚¨á Gi·∫£m d·∫ßn'}
                </button>
            </div>

            {/* B·∫£ng danh s√°ch ƒë∆°n */}
            <div className={cx('table-wrapper')}>
                {loading ? (
                    <p>ƒêang t·∫£i...</p>
                ) : (
                    <>
                        <table className={cx('orders-table')}>
                            <thead>
                                <tr>
                                    <th>M√£ ƒë∆°n</th>
                                    <th>Kh√°ch h√†ng</th>
                                    <th>Ng√†y ƒë·∫∑t</th>
                                    <th>Tr·∫°ng th√°i</th>
                                    <th>Thanh to√°n</th>
                                    <th className={cx('text-right')}>T·ªïng ti·ªÅn</th>
                                    <th className={cx('text-center')}>Thao t√°c</th>
                                </tr>
                            </thead>
                            <tbody>
                                {orders.length > 0 ? (
                                    orders.map((order) => (
                                        <tr key={order._id}>
                                            <td>#{order._id.slice(-6)}</td>
                                            <td>{order.shippingInfo?.name || '·∫®n danh'}</td>
                                            <td>{new Date(order.createdAt).toLocaleDateString('vi-VN')}</td>
                                            <td>
                                                <span className={cx('status', order.status)}>{order.status}</span>
                                            </td>
                                            <td>{order.paymentMethod || '---'}</td>
                                            <td className={cx('text-right')}>
                                                {order.finalAmount.toLocaleString('vi-VN')} ‚Ç´
                                            </td>
                                            <td className={cx('actions')}>
                                                <Link
                                                    to={`/admin/orders/${order._id}`}
                                                    className={cx('action-btn', 'view')}
                                                >
                                                    <Eye size={18} />
                                                </Link>
                                                <button className={cx('action-btn', 'edit')}>
                                                    <Pencil size={18} />
                                                </button>
                                                <button
                                                    onClick={() => handleDelete(order._id)}
                                                    className={cx('action-btn', 'delete')}
                                                >
                                                    <Trash2 size={18} />
                                                </button>
                                            </td>
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        <td colSpan="7" className={cx('no-orders')}>
                                            Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o
                                        </td>
                                    </tr>
                                )}
                            </tbody>
                        </table>

                        {totalPages > 1 && (
                            <Pagination
                                currentPage={currentPage}
                                totalPages={totalPages}
                                onPageChange={(page) => setCurrentPage(page)}
                            />
                        )}
                    </>
                )}
            </div>
        </div>
    );
};

export default OrdersManagement;
