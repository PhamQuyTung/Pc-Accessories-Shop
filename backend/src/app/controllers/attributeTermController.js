const AttributeTerm = require("../models/attributeTerm");
const Attribute = require("../models/attribute");
const slugify = require("slugify");
const mongoose = require("mongoose");

const createAttributeTerm = async (req, res) => {
  try {
    const { attributeId } = req.params;
    const { name } = req.body;

    if (typeof name !== "string" || !name.trim()) {
      return res.status(400).json({
        message: "Gi√° tr·ªã ch·ªßng lo·∫°i kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i chu·ªói.",
      });
    }

    const slug = slugify(name.trim(), { lower: true });
    const existing = await AttributeTerm.findOne({
      slug,
      attribute: attributeId,
    });

    if (existing) {
      return res.status(409).json({ message: "Ch·ªßng lo·∫°i ƒë√£ t·ªìn t·∫°i." });
    }

    const newTerm = await AttributeTerm.create({
      attribute: attributeId,
      name: name.trim(),
      slug,
    });

    res.status(201).json(newTerm);
  } catch (error) {
    console.error("üí• L·ªói khi t·∫°o AttributeTerm:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

const getAttributeTerms = async (req, res) => {
  try {
    const { attributeId } = req.params;
    const terms = await AttributeTerm.find({ attribute: attributeId }).sort({
      createdAt: -1,
    });
    res.status(200).json(terms);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

const deleteAttributeTerm = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await AttributeTerm.findByIdAndDelete(id);
    if (!deleted) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ch·ªßng lo·∫°i." });
    }
    res.status(200).json({ message: "ƒê√£ x√≥a ch·ªßng lo·∫°i." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

const updateAttributeTerm = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, slug } = req.body;

    if (!name || typeof name !== "string") {
      return res.status(400).json({ message: "T√™n kh√¥ng h·ª£p l·ªá." });
    }

    const updated = await AttributeTerm.findByIdAndUpdate(
      id,
      {
        name: name.trim(),
        slug: slug?.trim()?.toLowerCase() || slugify(name, { lower: true }),
      },
      { new: true }
    );

    if (!updated) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ch·ªßng lo·∫°i." });
    }

    res.status(200).json(updated);
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t attributeTerm:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

module.exports = {
  createAttributeTerm,
  getAttributeTerms,
  deleteAttributeTerm,
  updateAttributeTerm,
};
