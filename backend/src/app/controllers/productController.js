// app/controllers/productController.js
const Product = require("../models/product");
const Category = require("../models/category");
const mongoose = require("mongoose");

class ProductController {
  // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
  async getAll(req, res) {
    try {
      const {
        isAdmin,
        search,
        category,
        visible,
        sort,
        page = 1,
        limit = 10,
      } = req.query;

      const pageNum = parseInt(page);
      const limitNum = parseInt(limit);
      const skip = (pageNum - 1) * limitNum;

      let match = { deleted: { $ne: true } };

      if (search) {
        match.name = { $regex: search, $options: "i" };
      }

      // N·∫øu c√≥ category, t√¨m _id c·ªßa category ƒë√≥
      // Gi·∫£ s·ª≠ category l√† slug, n·∫øu l√† _id th√¨ kh√¥ng c·∫ßn t√¨m
      if (category) {
        // N·∫øu category l√† slug, c√≥ th·ªÉ c·∫ßn join ho·∫∑c truy v·∫•n ri√™ng ƒë·ªÉ t√¨m _id
        const cat = await Category.findOne({ slug: category });
        if (cat) {
          match.category = cat._id;
        }
      }

      if (visible !== undefined && visible !== "") {
        match.visible = visible === "true";
      }

      if (isAdmin !== "true") {
        match.visible = true;
      }

      // B·∫Øt ƒë·∫ßu pipeline
      let pipeline = [
        { $match: match },
        {
          $lookup: {
            from: "categories",
            localField: "category",
            foreignField: "_id",
            as: "category",
          },
        },
        { $unwind: "$category" },
      ];

      // N·∫øu sort theo gi√° th√¨ th√™m field sortPrice
      if (sort && sort.startsWith("price")) {
        pipeline.push({
          $addFields: {
            sortPrice: {
              $cond: {
                if: { $gt: [{ $toDouble: "$discountPrice" }, 0] },
                then: { $toDouble: "$discountPrice" },
                else: { $toDouble: "$price" },
              },
            },
          },
        });
      }

      // Sort
      if (sort) {
        const [field, order] = sort.split("_");
        const sortValue = order === "asc" ? 1 : -1;

        const sortField = field === "price" ? "sortPrice" : field;
        pipeline.push({ $sort: { [sortField]: sortValue } });
      } else {
        pipeline.push({ $sort: { createdAt: -1 } }); // Default sort
      }

      // ƒê·∫øm t·ªïng s·ªë
      const countPipeline = [...pipeline];
      countPipeline.push({ $count: "total" });
      const countResult = await Product.aggregate(countPipeline);
      const totalCount = countResult[0]?.total || 0;

      // Ph√¢n trang
      pipeline.push({ $skip: skip }, { $limit: limitNum });

      const products = await Product.aggregate(pipeline);

      res.status(200).json({
        products,
        totalCount,
        currentPage: pageNum,
        totalPages: Math.ceil(totalCount / limitNum),
      });
    } catch (err) {
      console.log("L·ªói getAll:", err); // <--- n√™n log ra
      res.status(500).json({ message: "L·ªói server", error: err });
    }
  }

  // L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo slug
  async getBySlug(req, res) {
    try {
      const product = await Product.findOne({
        slug: req.params.slug,
        deleted: { $ne: true }, // Ch·ªâ l·∫•y s·∫£n ph·∫©m ch∆∞a x√≥a
        visible: true, // Ch·ªâ l·∫•y s·∫£n ph·∫©m ƒëang hi·ªÉn th·ªã
      }).lean();

      if (!product)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

      const reviews = product.reviews || [];
      const reviewCount = reviews.length;
      const averageRating = reviewCount
        ? reviews.reduce((acc, cur) => acc + cur.rating, 0) / reviewCount
        : 0;

      res.json({
        ...product,
        averageRating: Number((Math.round(averageRating * 10) / 10).toFixed(1)),
        reviewCount,
      });
    } catch (err) {
      res.status(500).json({ error: "L·ªói server" });
    }
  }

  // L·∫•y breadcrumb theo slug
  async getBreadcrumb(req, res) {
    try {
      const product = await Product.findOne({ slug: req.params.slug }).populate(
        "category"
      );

      if (!product) {
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
      }

      const breadcrumb = [
        { label: "Trang ch·ªß", path: "/" },
        {
          label: product.category?.name || "Danh m·ª•c",
          path: `/collections/${product.category?.slug || ""}`,
        },
        { label: product.name, path: `/products/${product.slug}` },
      ];

      res.json(breadcrumb);
    } catch (err) {
      res.status(500).json({ error: "L·ªói server" });
    }
  }

  // API t·∫°o s·∫£n ph·∫©m t·ª´ React (POST /api/products)
  async createProduct(req, res) {
    try {
      const product = new Product(req.body); // T·ª± ƒë·ªông t·∫°o slug b·∫±ng middleware
      await product.save();
      res.status(201).json(product);
    } catch (err) {
      res
        .status(400)
        .json({ error: "T·∫°o s·∫£n ph·∫©m th·∫•t b·∫°i", details: err.message });
    }
  }

  // L·∫•y s·∫£n ph·∫©m li√™n quan
  async getRelatedProducts(req, res) {
    const { category, exclude } = req.query;

    try {
      const related = await Product.find({
        category,
        _id: { $ne: exclude },
        deleted: { $ne: true }, // Ch·ªâ l·∫•y s·∫£n ph·∫©m ch∆∞a x√≥a
        visible: true, // Ch·ªâ l·∫•y s·∫£n ph·∫©m ƒëang hi·ªÉn th·ªã
      })
        .limit(7)
        .lean(); // Th√™m .lean() ƒë·ªÉ hi·ªáu su·∫•t t·ªët h∆°n

      const enrichedRelated = related.map((product) => {
        const reviews = product.reviews || [];
        const reviewCount = reviews.length;
        const averageRating = reviewCount
          ? reviews.reduce((sum, r) => sum + r.rating, 0) / reviewCount
          : 0;

        return {
          ...product,
          averageRating: Number(
            (Math.round(averageRating * 10) / 10).toFixed(1)
          ),
          reviewCount,
        };
      });

      res.json(enrichedRelated);
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m li√™n quan:", err);
      res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y s·∫£n ph·∫©m li√™n quan" });
    }
  }

  // Th√™m ƒë√°nh gi√° cho s·∫£n ph·∫©m
  async addReview(req, res) {
    const { rating, comment } = req.body;

    try {
      const product = await Product.findById(req.params.id);
      if (!product)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

      const newReview = {
        name: req.user.name, // ‚úÖ L·∫•y t·ª´ middleware
        rating: Number(rating),
        comment,
      };

      product.reviews.push(newReview);
      await product.save();
      console.log("Body:", req.body);
      console.log("üë§ User review:", req.user);

      res.status(201).json({ message: "ƒê√£ th√™m ƒë√°nh gi√°", review: newReview });
    } catch (err) {
      res.status(500).json({ error: "L·ªói khi th√™m ƒë√°nh gi√°" });
    }
  }

  // L·∫•y danh s√°ch ƒë√°nh gi√° c·ªßa s·∫£n ph·∫©m
  async getReviews(req, res) {
    try {
      const product = await Product.findById(req.params.id).select("reviews");

      if (!product)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

      res.json(product.reviews);
    } catch (err) {
      res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch ƒë√°nh gi√°" });
    }
  }

  // Trang edit s·∫£n ph·∫©m
  async editProduct(req, res) {
    try {
      const product = await Product.findById(req.params.id);
      if (!product)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

      // G·ª≠i JSON cho frontend React
      res.json(product);
    } catch (err) {
      res.status(500).json({ error: "L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m" });
    }
  }

  // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  async getById(req, res) {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ error: "ID kh√¥ng h·ª£p l·ªá" });
    }
    try {
      const product = await Product.findById(req.params.id);
      if (!product)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
      res.json(product);
    } catch (err) {
      res.status(500).json({ error: "L·ªói server" });
    }
  }

  // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  async updateProduct(req, res) {
    try {
      const updated = await Product.findByIdAndUpdate(req.params.id, req.body, {
        new: true,
      });
      if (!updated)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
      res.json(updated);
    } catch (err) {
      res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m" });
    }
  }

  // X√≥a s·∫£n ph·∫©m (chuy·ªÉn v√†o th√πng r√°c)
  async softDeleteProduct(req, res) {
    try {
      const product = await Product.findByIdAndUpdate(
        req.params.id,
        { deleted: true },
        { new: true }
      );
      if (!product)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
      res.json({ message: "ƒê√£ chuy·ªÉn v√†o th√πng r√°c", product });
    } catch (err) {
      res.status(500).json({ error: "L·ªói khi x√≥a t·∫°m th·ªùi" });
    }
  }

  // L·∫•y s·∫£n ph·∫©m trong th√πng r√°c
  async getTrash(req, res) {
    try {
      const products = await Product.find({ deleted: true });
      res.json(products);
    } catch (err) {
      res.status(500).json({ error: "L·ªói server" });
    }
  }

  // X√≥a s·∫£n ph·∫©m vƒ©nh vi·ªÖn
  async forceDeleteProduct(req, res) {
    try {
      const product = await Product.findByIdAndDelete(req.params.id);
      if (!product)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
      res.json({ message: "ƒê√£ x√≥a vƒ©nh vi·ªÖn" });
    } catch (err) {
      res.status(500).json({ error: "L·ªói khi x√≥a vƒ©nh vi·ªÖn" });
    }
  }

  // Kh√¥i ph·ª•c s·∫£n ph·∫©m t·ª´ th√πng r√°c
  async restoreProduct(req, res) {
    try {
      const product = await Product.findByIdAndUpdate(
        req.params.id,
        { deleted: false },
        { new: true }
      );
      if (!product)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
      res.json({ message: "ƒê√£ kh√¥i ph·ª•c s·∫£n ph·∫©m", product });
    } catch (err) {
      res.status(500).json({ error: "L·ªói khi kh√¥i ph·ª•c s·∫£n ph·∫©m" });
    }
  }

  // T√¨m ki·∫øm s·∫£n ph·∫©m
  async searchProducts(req, res) {
    const { query } = req.query;

    if (!query || query.trim() === "") {
      return res.status(400).json({ error: "Query kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }

    try {
      const products = await Product.find({
        name: { $regex: query, $options: "i" },
        deleted: { $ne: true },
        visible: true, // Ch·ªâ l·∫•y s·∫£n ph·∫©m ƒëang hi·ªÉn th·ªã
      })
        .limit(10)
        .lean();

      const enrichedProducts = products.map((product) => {
        const reviews = product.reviews || [];
        const reviewCount = reviews.length;
        const averageRating = reviewCount
          ? reviews.reduce((acc, cur) => acc + cur.rating, 0) / reviewCount
          : 0;

        return {
          ...product,
          averageRating: Number(
            (Math.round(averageRating * 10) / 10).toFixed(1)
          ),
          reviewCount,
        };
      });

      res.json(enrichedProducts);
    } catch (err) {
      console.error("L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m:", err);
      res.status(500).json({ error: "L·ªói server" });
    }
  }

  // PATCH /api/products/toggle-visible/:id
  async toggleVisible(req, res) {
    try {
      const product = await Product.findById(req.params.id);
      if (!product)
        return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

      product.visible = !product.visible;
      await product.save();

      res.json({
        message: `S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ${product.visible ? "hi·ªÉn th·ªã" : "·∫©n"}`,
        visible: product.visible,
      });
    } catch (err) {
      res.status(500).json({ error: "L·ªói server" });
    }
  }
}

module.exports = new ProductController();
