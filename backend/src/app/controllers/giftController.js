const Gift = require("../models/gift");
const mongoose = require("mongoose");

// üëâ L·∫•y t·∫•t c·∫£ gifts
exports.getAllGifts = async (req, res) => {
  try {
    const gifts = await Gift.find().sort({ createdAt: -1 }).populate({
      path: "products.productId",
      select: "name slug images price discountPrice status",
    });

    res.json(gifts);
  } catch (err) {
    console.error("L·ªói khi l·∫•y gifts:", err);
    res.status(500).json({ message: "L·ªói server khi l·∫•y gifts" });
  }
};

// üëâ L·∫•y gift theo ID
exports.getGiftById = async (req, res) => {
  try {
    const gift = await Gift.findById(req.params.id).populate({
      path: "products.productId",
      select: "name slug images price discountPrice status",
    });

    if (!gift) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gift" });
    res.json(gift);
  } catch (err) {
    console.error("L·ªói khi l·∫•y gift:", err);
    res.status(500).json({ message: "L·ªói server khi l·∫•y gift" });
  }
};

// üëâ T·∫°o gift m·ªõi
exports.createGift = async (req, res) => {
  try {
    const { title, products = [] } = req.body;

    if (!title) {
      return res.status(400).json({ message: "Thi·∫øu title gift" });
    }

    const gift = await Gift.create({
      title,
      products,
    });

    res.status(201).json(gift);
  } catch (err) {
    console.error("L·ªói t·∫°o gift:", err);
    res.status(400).json({
      message: "T·∫°o gift th·∫•t b·∫°i",
      error: err.message || err,
    });
  }
};

// üëâ C·∫≠p nh·∫≠t gift
exports.updateGift = async (req, res) => {
  try {
    const updated = await Gift.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
    });
    if (!updated)
      return res.status(404).json({ message: "Gift kh√¥ng t·ªìn t·∫°i" });

    res.json(updated);
  } catch (err) {
    console.error("L·ªói c·∫≠p nh·∫≠t gift:", err);
    res.status(400).json({ message: "C·∫≠p nh·∫≠t gift th·∫•t b·∫°i" });
  }
};

// üëâ X√≥a gift
exports.deleteGift = async (req, res) => {
  try {
    const deleted = await Gift.findByIdAndDelete(req.params.id);
    if (!deleted)
      return res.status(404).json({ message: "Gift kh√¥ng t·ªìn t·∫°i" });

    res.json({ message: "X√≥a gift th√†nh c√¥ng" });
  } catch (err) {
    console.error("L·ªói x√≥a gift:", err);
    res.status(400).json({ message: "X√≥a gift th·∫•t b·∫°i" });
  }
};

// üëâ (t√πy ch·ªçn) th√™m s·∫£n ph·∫©m v√†o gift
exports.addProductToGift = async (req, res) => {
  try {
    const { giftId, product } = req.body;

    if (!mongoose.Types.ObjectId.isValid(giftId)) {
      return res.status(400).json({ message: "giftId kh√¥ng h·ª£p l·ªá" });
    }

    const gift = await Gift.findById(giftId);
    if (!gift) return res.status(404).json({ message: "Gift kh√¥ng t·ªìn t·∫°i" });

    gift.products.push(product);
    await gift.save();

    res.json({ message: "Th√™m s·∫£n ph·∫©m v√†o gift th√†nh c√¥ng", gift });
  } catch (err) {
    console.error("L·ªói khi th√™m product v√†o gift:", err);
    res.status(500).json({ message: "L·ªói server khi th√™m product" });
  }
};

// üëâ (t√πy ch·ªçn) x√≥a 1 s·∫£n ph·∫©m kh·ªèi gift
exports.removeProductFromGift = async (req, res) => {
  try {
    const { giftId, productId } = req.body;

    const gift = await Gift.findById(giftId);
    if (!gift) return res.status(404).json({ message: "Gift kh√¥ng t·ªìn t·∫°i" });

    gift.products = gift.products.filter(
      (p) => p.productId.toString() !== productId.toString()
    );
    await gift.save();

    res.json({ message: "X√≥a s·∫£n ph·∫©m kh·ªèi gift th√†nh c√¥ng", gift });
  } catch (err) {
    console.error("L·ªói khi x√≥a product kh·ªèi gift:", err);
    res.status(500).json({ message: "L·ªói server khi x√≥a product" });
  }
};
