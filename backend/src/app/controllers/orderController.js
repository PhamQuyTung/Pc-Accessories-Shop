const Order = require("../models/order");
const Cart = require("../models/cart");

exports.checkoutOrder = async (req, res) => {
  const userId = req.userId;

  try {
    const cartItems = await Cart.find({ user_id: userId }).populate({
      path: "product_id",
      select: "name deleted status price discountPrice images",
    });

    if (!cartItems.length) {
      return res.status(400).json({ message: "Gi·ªè h√†ng ƒëang tr·ªëng!" });
    }

    // ‚úÖ L·ªçc s·∫£n ph·∫©m h·ª£p l·ªá
    const validCartItems = cartItems.filter((item) => {
      const p = item.product_id;
      return (
        p &&
        !p.deleted &&
        Array.isArray(p.status) &&
        !p.status.includes("ƒë√£ thu h·ªìi")
      );
    });

    if (!validCartItems.length) {
      return res.status(400).json({
        message:
          "T·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng ƒë√£ b·ªã thu h·ªìi ho·∫∑c kh√¥ng h·ª£p l·ªá!",
      });
    }

    // ‚úÖ Chu·∫©n h√≥a item trong ƒë∆°n h√†ng
    const orderItems = validCartItems.map((item) => {
      const p = item.product_id;
      const finalPrice =
        p.discountPrice && p.discountPrice > 0 ? p.discountPrice : p.price;

      return {
        product_id: p._id,
        quantity: item.quantity,
        price: p.price, // gi√° g·ªëc
        discountPrice: p.discountPrice, // gi√° gi·∫£m (n·∫øu c√≥)
        finalPrice, // gi√° th·ª±c t·∫ø
        total: finalPrice * item.quantity,
      };
    });

    // ‚úÖ T√≠nh to√°n t·ªïng
    const subtotal = orderItems.reduce((sum, item) => sum + item.total, 0);
    const tax = req.body.tax || 0;
    const discount = req.body.discount || 0;
    const shippingFee = req.body.shippingFee || 0;
    const serviceFee = req.body.serviceFee || 0;

    // T·ªïng tr∆∞·ªõc gi·∫£m gi√°
    const totalAmount = subtotal + tax + shippingFee + serviceFee;

    // T·ªïng sau gi·∫£m gi√°
    const finalAmount = totalAmount - discount;

    let newOrder = new Order({
      user_id: userId,
      items: orderItems,
      subtotal,
      tax,
      discount,
      shippingFee,
      serviceFee,
      totalAmount,
      finalAmount,
      shippingInfo: req.body.shippingInfo,
      paymentMethod: req.body.paymentMethod,
    });

    await newOrder.save();

    // üëá Populate th√™m th√¥ng tin s·∫£n ph·∫©m
    newOrder = await newOrder.populate(
      "items.product_id",
      "name slug price discountPrice images status deleted"
    );

    // ‚úÖ X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t
    await Cart.deleteMany({ user_id: userId });

    // Emit realtime n·∫øu c√≥ socket
    const io = req.app.locals.io;
    if (io) io.emit("order:new", { order: newOrder });

    res.status(200).json({
      message: "ƒê·∫∑t h√†ng th√†nh c√¥ng!",
      order: newOrder,
    });
  } catch (err) {
    console.error("üî• L·ªói khi ƒë·∫∑t h√†ng:", err);
    res.status(500).json({ message: "L·ªói khi ƒë·∫∑t h√†ng" });
  }
};

exports.cancelOrder = async (req, res) => {
  const orderId = req.params.id;
  const userId = req.userId;

  try {
    const order = await Order.findOne({ _id: orderId, user_id: userId });
    if (!order) {
      return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i!" });
    }
    if (order.status === "cancelled") {
      return res.status(400).json({ message: "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥!" });
    }
    if (order.status === "completed") {
      return res
        .status(400)
        .json({ message: "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ƒë√£ ho√†n th√†nh!" });
    }

    order.status = "cancelled";
    order.cancelReason = req.body.reason || "Kh√¥ng r√µ l√Ω do";
    await order.save();

    // üëá Emit realtime t·ª´ app.locals
    const io = req.app.locals.io;
    if (io) io.emit("order:cancelled", { order });

    res
      .status(200)
      .json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng!", order });
  } catch (err) {
    console.error("üî• L·ªói h·ªßy ƒë∆°n h√†ng:", err);
    res.status(500).json({ message: "L·ªói khi h·ªßy ƒë∆°n h√†ng" });
  }
};

exports.deleteOrder = async (req, res) => {
  const orderId = req.params.id;
  const userId = req.userId;

  try {
    const order = await Order.findOneAndUpdate(
      { _id: orderId, user_id: userId },
      { status: "deleted" }, // üëà Soft delete
      { new: true }
    );

    if (!order) {
      return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i!" });
    }

    // üëá Emit realtime t·ª´ app.locals
    const io = req.app.locals.io;
    if (io) io.emit("order:deleted", { orderId });

    res.status(200).json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u x√≥a!", order });
  } catch (err) {
    console.error("üî• L·ªói x√≥a ƒë∆°n h√†ng:", err);
    res.status(500).json({ message: "L·ªói khi x√≥a ƒë∆°n h√†ng" });
  }
};

exports.getUserOrders = async (req, res) => {
  try {
    const orders = await Order.find({ user_id: req.userId })
      .populate(
        "items.product_id",
        "name price discountPrice images status deleted"
      ) // üëà th√™m images
      .sort({ createdAt: -1 });

    res.status(200).json(orders);
  } catch (err) {
    console.error("üî• L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", err);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng" });
  }
};

exports.getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find()
      .populate(
        "items.product_id",
        "name price discountPrice images status deleted"
      )
      .sort({ createdAt: -1 });

    res.status(200).json({ orders });
  } catch (err) {
    console.error("üî• L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", err);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng" });
  }
};

// L·∫•y ƒë∆°n h√†ng theo ID
exports.getOrderById = async (req, res) => {
  try {
    const { id } = req.params;

    const order = await Order.findById(id).populate(
      "items.product_id",
      "name slug price discountPrice images status deleted"
    );

    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
    }

    res.status(200).json({ order });
  } catch (err) {
    console.error("üî• L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", err);
    res.status(500).json({ message: "L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng" });
  }
};

// PATCH /api/orders/:id/status
exports.updateOrderStatus = async (req, res) => {
  try {
    const { status } = req.body;
    const order = await Order.findByIdAndUpdate(
      req.params.id,
      { status },
      { new: true }
    ).populate("items.product_id", "name slug images");

    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    res.json({ success: true, order });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

// T·∫°o ƒë∆°n h√†ng b·ªüi admin
exports.createOrderByAdmin = async (req, res) => {
  try {
    const {
      shippingInfo,
      note,
      paymentMethod,
      status,
      items,
      subtotal,
      tax,
      serviceFee,
      shippingFee,
      discount,
      finalAmount,
    } = req.body;

    if (!items || !items.length) {
      return res
        .status(400)
        .json({ message: "ƒê∆°n h√†ng ph·∫£i c√≥ √≠t nh·∫•t 1 s·∫£n ph·∫©m!" });
    }

    const orderItems = items.map((item) => ({
      product_id: item.product_id || null, // n·∫øu admin nh·∫≠p tay th√¨ c√≥ th·ªÉ null
      productName: item.productName || "", // üëà l∆∞u l·∫°i t√™n s·∫£n ph·∫©m nh·∫≠p tay
      quantity: item.quantity,
      price: item.price,
    }));

    const order = new Order({
      user_id: req.userId || null, // Admin c√≥ th·ªÉ t·∫°o ƒë∆°n cho kh√°ch l·∫ª
      items: orderItems,
      subtotal,
      tax,
      serviceFee,
      shippingFee,
      discount,
      totalAmount: finalAmount,
      finalAmount,
      paymentMethod: paymentMethod?.toLowerCase(), // üëà √©p v·ªÅ lowercase,
      status: status || "new",
      shippingInfo,
      note,
    });

    await order.save();

    // Emit realtime n·∫øu c√≥ socket
    const io = req.app.locals.io;
    if (io) io.emit("order:new", { order });

    return res.status(201).json({ message: "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng!", order });
  } catch (err) {
    console.error("üî• L·ªói t·∫°o ƒë∆°n h√†ng (admin):", err);
    return res.status(500).json({ message: "L·ªói khi admin t·∫°o ƒë∆°n h√†ng" });
  }
};

// L·∫•y th·ªëng k√™ ƒë∆°n h√†ng theo gi·ªù/ng√†y/th√°ng/nƒÉm (c√≥ timezone VN)
exports.getOrderStats = async (req, res) => {
  try {
    // Theo gi·ªù trong ng√†y h√¥m nay
    const startOfDay = new Date();
    startOfDay.setHours(0, 0, 0, 0);

    const byHour = await Order.aggregate([
      { $match: { createdAt: { $gte: startOfDay }, status: "completed" } },
      {
        $group: {
          _id: {
            hour: {
              $hour: { date: "$createdAt", timezone: "Asia/Ho_Chi_Minh" },
            },
          },
          orders: { $sum: 1 },
          revenue: { $sum: "$finalAmount" },
        },
      },
      { $sort: { "_id.hour": 1 } },
    ]);

    // Theo ng√†y trong tu·∫ßn n√†y
    const startOfWeek = new Date();
    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay()); // Ch·ªß nh·∫≠t = 0
    startOfWeek.setHours(0, 0, 0, 0);

    const byDay = await Order.aggregate([
      { $match: { createdAt: { $gte: startOfWeek }, status: "completed" } },
      {
        $group: {
          _id: {
            day: {
              $dayOfMonth: { date: "$createdAt", timezone: "Asia/Ho_Chi_Minh" },
            },
          },
          orders: { $sum: 1 },
          revenue: { $sum: "$finalAmount" },
        },
      },
      { $sort: { "_id.day": 1 } },
    ]);

    // Theo th√°ng trong nƒÉm nay
    const startOfYear = new Date(new Date().getFullYear(), 0, 1);

    const byMonth = await Order.aggregate([
      { $match: { createdAt: { $gte: startOfYear }, status: "completed" } },
      {
        $group: {
          _id: {
            month: {
              $month: { date: "$createdAt", timezone: "Asia/Ho_Chi_Minh" },
            },
          },
          orders: { $sum: 1 },
          revenue: { $sum: "$finalAmount" },
        },
      },
      { $sort: { "_id.month": 1 } },
    ]);

    // Theo nƒÉm (to√†n b·ªô l·ªãch s·ª≠)
    const byYear = await Order.aggregate([
      { $match: { status: "completed" } },
      {
        $group: {
          _id: {
            year: {
              $year: { date: "$createdAt", timezone: "Asia/Ho_Chi_Minh" },
            },
          },
          orders: { $sum: 1 },
          revenue: { $sum: "$finalAmount" },
        },
      },
      { $sort: { "_id.year": 1 } },
    ]);

    res.json({
      byHour,
      byDay,
      byMonth,
      byYear,
    });
  } catch (err) {
    console.error("üî• L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng:", err);
    res.status(500).json({ message: "L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng" });
  }
};
