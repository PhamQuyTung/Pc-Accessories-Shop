const Cart = require("../models/cart"); // ƒê∆∞·ªùng d·∫´n t·ªõi model product
const Product = require("../models/product"); // üëà ƒê∆∞·ªùng d·∫´n ch√≠nh x√°c ƒë·∫øn model Product
const mongoose = require("mongoose");

exports.addToCart = async (req, res) => {
  try {
    const { product_id, quantity } = req.body;
    const userId = req.user.id; // ‚úÖ L·∫•y user id t·ª´ middleware ƒë√£ g√°n

    const existingItem = await Cart.findOne({ user_id: userId, product_id });

    if (existingItem) {
      // N·∫øu ƒë√£ c√≥ th√¨ c·ªông d·ªìn s·ªë l∆∞·ª£ng
      existingItem.quantity += quantity;
      await existingItem.save();
    } else {
      // N·∫øu ch∆∞a c√≥ th√¨ th√™m m·ªõi
      const newItem = new Cart({
        user_id: userId, // ‚úÖ b·∫Øt bu·ªôc
        product_id,
        quantity,
      });
      await newItem.save();
    }

    res.status(200).json({ message: "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói th√™m v√†o gi·ªè h√†ng:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi th√™m gi·ªè h√†ng." });
  }
};

exports.getCart = async (req, res) => {
  try {
    const userId = req.userId;

    // 1. L·∫•y gi·ªè h√†ng + populate th√¥ng tin s·∫£n ph·∫©m
    const items = await Cart.find({ user_id: userId }).populate({
      path: "product_id",
      select: "name price discountPrice images slug deleted visible",
    });

    // 2. Tr∆∞·ªùng h·ª£p gi·ªè h√†ng r·ªóng
    if (!items || items.length === 0) {
      return res.status(200).json({ items: [], removed: [] });
    }

    // 3. T√°ch s·∫£n ph·∫©m h·ª£p l·ªá v√† s·∫£n ph·∫©m b·ªã thu h·ªìi
    const validItems = [];
    const removed = [];

    for (const item of items) {
      const product = item.product_id;
      console.log("product trong cart l√†:", item.product_id);
      console.log("üîç Ki·ªÉm tra s·∫£n ph·∫©m:", product?.name);
      console.log("   ‚û§ Deleted:", product?.deleted);
      console.log("   ‚û§ Visible:", product?.visible);

      if (!product || product.deleted || product.visible === false) {
        console.log("‚ùå S·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá, x√≥a kh·ªèi gi·ªè");
        removed.push({
          _id: item._id,
          name: product?.name || "Kh√¥ng x√°c ƒë·ªãnh",
        });
        console.log("üßæ product:", product);
        console.log(
          "üßæ deleted:",
          product?.deleted,
          "visible:",
          product?.visible
        );

        // X√≥a item kh√¥ng h·ª£p l·ªá kh·ªèi DB
        await Cart.deleteOne({ _id: item._id });
      } else {
        validItems.push(item);
      }
    }

    // 4. Tr·∫£ k·∫øt qu·∫£ v·ªÅ client
    return res.status(200).json({ items: validItems, removed });
  } catch (error) {
    console.error("üî• L·ªói khi l·∫•y gi·ªè h√†ng:", error);
    return res.status(500).json({ message: "L·ªói server khi l·∫•y gi·ªè h√†ng" });
  }
};

exports.getCartCount = async (req, res) => {
  try {
    const userId = req.userId;
    const count = await Cart.countDocuments({ user_id: userId });
    res.status(200).json({ count });
  } catch (err) {
    console.error("üî• L·ªói l·∫•y cart count:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

exports.removeFromCart = async (req, res) => {
  const userId = req.userId;
  const { product_id } = req.body;

  try {
    const productIdObj = new mongoose.Types.ObjectId(product_id);
    await Cart.deleteOne({ user_id: userId, product_id: productIdObj });
    res.status(200).json({ message: "ƒê√£ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi xo√° s·∫£n ph·∫©m" });
  }
};

exports.updateCartQuantity = async (req, res) => {
  const userId = req.userId;
  const { product_id, quantity } = req.body;

  try {
    const cartItem = await Cart.findOne({ user_id: userId, product_id });

    if (!cartItem) {
      return res
        .status(404)
        .json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng" });
    }

    cartItem.quantity = quantity;
    await cartItem.save();

    res.status(200).json({ message: "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng", cartItem });
  } catch (err) {
    console.error("üî• L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", err);
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng" });
  }
};
