const Cart = require("../models/cart"); // ƒê∆∞·ªùng d·∫´n t·ªõi model product
const Product = require("../models/product"); // üëà ƒê∆∞·ªùng d·∫´n ch√≠nh x√°c ƒë·∫øn model Product
const mongoose = require("mongoose");

exports.addToCart = async (req, res) => {
  try {
    const { product_id, quantity } = req.body;
    const userId = req.user.id; // ‚úÖ L·∫•y user id t·ª´ middleware ƒë√£ g√°n

    const existingItem = await Cart.findOne({ user_id: userId, product_id });

    if (existingItem) {
      // N·∫øu ƒë√£ c√≥ th√¨ c·ªông d·ªìn s·ªë l∆∞·ª£ng
      existingItem.quantity += quantity;
      await existingItem.save();
    } else {
      // N·∫øu ch∆∞a c√≥ th√¨ th√™m m·ªõi
      const newItem = new Cart({
        user_id: userId, // ‚úÖ b·∫Øt bu·ªôc
        product_id,
        quantity,
      });
      await newItem.save();
    }

    res.status(200).json({ message: "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói th√™m v√†o gi·ªè h√†ng:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi th√™m gi·ªè h√†ng." });
  }
};

exports.getCart = async (req, res) => {
  try {
    const userId = req.userId;
    console.log("üëâ userId t·ª´ token:", userId); // debug log

    // L·∫•y to√†n b·ªô s·∫£n ph·∫©m gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng ƒë√≥
    const items = await Cart.find({ user_id: userId }).populate("product_id");

    if (!items) {
      return res.status(200).json({ items: [] }); // Kh√¥ng c√≥ gi·ªè h√†ng v·∫´n tr·∫£ v·ªÅ m·∫£ng r·ªóng
    }

    res.status(200).json(items);
  } catch (error) {
    console.error("üî• L·ªói khi l·∫•y gi·ªè h√†ng:", error); // ghi ra l·ªói chi ti·∫øt
    res.status(500).json({ message: "L·ªói server khi l·∫•y gi·ªè h√†ng" });
  }
};

exports.removeFromCart = async (req, res) => {
  const userId = req.userId;
  const { product_id } = req.body;

  try {
    const productIdObj = new mongoose.Types.ObjectId(product_id);
    await Cart.deleteOne({ user_id: userId, product_id: productIdObj });
    res.status(200).json({ message: "ƒê√£ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi xo√° s·∫£n ph·∫©m" });
  }
};

exports.updateCartQuantity = async (req, res) => {
  const userId = req.userId;
  const { product_id, quantity } = req.body;

  try {
    const cartItem = await Cart.findOne({ user_id: userId, product_id });

    if (!cartItem) {
      return res
        .status(404)
        .json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng" });
    }

    cartItem.quantity = quantity;
    await cartItem.save();

    res.status(200).json({ message: "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng", cartItem });
  } catch (err) {
    console.error("üî• L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", err);
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng" });
  }
};
