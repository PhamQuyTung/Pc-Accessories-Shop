// app/controllers/promotionGiftController.js
const PromotionGift = require("../models/promotionGift");
const Product = require("../models/product");

/* ============================================================
   üß© Helper functions
============================================================ */
const populateGift = [
  { path: "conditionProducts", select: "name price images" },
  { path: "relatedProducts", select: "name price images" },
];

const validateGiftData = (body) => {
  const {
    title,
    discountType,
    discountValue,
    conditionProducts,
    relatedProducts,
  } = body;

  if (
    !title ||
    !discountType ||
    !Array.isArray(conditionProducts) ||
    !conditionProducts.length ||
    !Array.isArray(relatedProducts) ||
    !relatedProducts.length
  ) {
    return "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc";
  }

  const value = Number(discountValue);
  if (isNaN(value) || value <= 0) return "Gi√° tr·ªã gi·∫£m kh√¥ng h·ª£p l·ªá";

  if (!["percent", "amount"].includes(discountType))
    return "Lo·∫°i gi·∫£m gi√° kh√¥ng h·ª£p l·ªá";

  if (discountType === "percent" && value > 100)
    return "Gi·∫£m ph·∫ßn trƒÉm kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100%";

  return null; // h·ª£p l·ªá
};

/* ============================================================
   üì¶ L·∫•y danh s√°ch t·∫•t c·∫£ khuy·∫øn m√£i qu√† t·∫∑ng
============================================================ */
exports.list = async (req, res) => {
  try {
    const gifts = await PromotionGift.find().populate(populateGift);
    res.json(gifts);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================
   ‚ûï Th√™m m·ªõi khuy·∫øn m√£i qu√† t·∫∑ng
============================================================ */
exports.create = async (req, res) => {
  try {
    const error = validateGiftData(req.body);
    if (error) return res.status(400).json({ message: error });

    const {
      title,
      description,
      discountType,
      discountValue,
      conditionProducts,
      relatedProducts,
      link,
    } = req.body;

    // üîç Ki·ªÉm tra t·ªìn t·∫°i s·∫£n ph·∫©m
    const [mains, related] = await Promise.all([
      Product.find({ _id: { $in: conditionProducts } }),
      Product.find({ _id: { $in: relatedProducts } }),
    ]);
    if (!mains.length)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ch√≠nh" });
    if (!related.length)
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m mua k√®m" });

    // ‚ö†Ô∏è Ki·ªÉm tra gi·∫£m theo s·ªë ti·ªÅn kh√¥ng v∆∞·ª£t qu√° gi√° th·∫•p nh·∫•t
    const value = Number(discountValue);
    if (discountType === "amount") {
      const minPrice = Math.min(...related.map((r) => r.price));
      if (value > minPrice)
        return res.status(400).json({
          message: `Gi√° tr·ªã gi·∫£m (${value.toLocaleString(
            "vi-VN"
          )}‚Ç´) v∆∞·ª£t qu√° gi√° s·∫£n ph·∫©m th·∫•p nh·∫•t (${minPrice.toLocaleString(
            "vi-VN"
          )}‚Ç´)`,
        });
    }

    // ‚úÖ T·∫°o m·ªõi
    const gift = await PromotionGift.create({
      title: title.trim(),
      description: description || "",
      discountType,
      discountValue: value,
      conditionProducts,
      relatedProducts,
      link: link || "",
      createdBy: req.user?._id,
    });

    const populated = await gift.populate(populateGift);
    res.status(201).json(populated);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================
   ‚úèÔ∏è C·∫≠p nh·∫≠t khuy·∫øn m√£i qu√† t·∫∑ng
============================================================ */
exports.update = async (req, res) => {
  try {
    const { id } = req.params;
    const gift = await PromotionGift.findById(id);
    if (!gift)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i" });

    const error = validateGiftData(req.body);
    if (error) return res.status(400).json({ message: error });

    const {
      title,
      description,
      discountType,
      discountValue,
      conditionProducts,
      relatedProducts,
      link,
    } = req.body;

    // üîç Ki·ªÉm tra s·∫£n ph·∫©m
    const [mains, related] = await Promise.all([
      Product.find({ _id: { $in: conditionProducts } }),
      Product.find({ _id: { $in: relatedProducts } }),
    ]);
    if (!mains.length || !related.length)
      return res.status(404).json({
        message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ch√≠nh ho·∫∑c s·∫£n ph·∫©m mua k√®m",
      });

    const value = Number(discountValue);
    if (discountType === "amount") {
      const minPrice = Math.min(...related.map((r) => r.price));
      if (value > minPrice)
        return res.status(400).json({
          message: `Gi√° tr·ªã gi·∫£m (${value.toLocaleString(
            "vi-VN"
          )}‚Ç´) v∆∞·ª£t qu√° gi√° s·∫£n ph·∫©m th·∫•p nh·∫•t (${minPrice.toLocaleString(
            "vi-VN"
          )}‚Ç´)`,
        });
    }

    // ‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu
    Object.assign(gift, {
      title: title.trim(),
      description: description || "",
      discountType,
      discountValue: value,
      conditionProducts,
      relatedProducts,
      link: link || "",
    });

    await gift.save();
    const populated = await gift.populate(populateGift);
    res.json(populated);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================
   üóëÔ∏è Xo√° khuy·∫øn m√£i qu√† t·∫∑ng
============================================================ */
exports.remove = async (req, res) => {
  try {
    const { id } = req.params;
    const gift = await PromotionGift.findById(id);
    if (!gift)
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i qu√† t·∫∑ng" });

    await gift.deleteOne();
    res.json({ message: "ƒê√£ xo√° khuy·∫øn m√£i qu√† t·∫∑ng" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================
   üîç L·∫•y khuy·∫øn m√£i qu√† t·∫∑ng theo productId
============================================================ */
exports.byProduct = async (req, res) => {
  try {
    const { productId } = req.params;

    const gifts = await PromotionGift.find({
      conditionProducts: productId, // ‚úÖ fix: ƒë√∫ng v·ªõi schema
      active: true,
    }).populate(populateGift);

    res.json(gifts || []);
  } catch (err) {
    console.error("L·ªói khi l·∫•y khuy·∫øn m√£i:", err);
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================
   üîÑ B·∫≠t/t·∫Øt tr·∫°ng th√°i khuy·∫øn m√£i
============================================================ */
exports.toggleActive = async (req, res) => {
  try {
    const { id } = req.params;
    const gift = await PromotionGift.findById(id);
    if (!gift)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i" });

    gift.active = !gift.active;
    await gift.save();

    res.json({ message: `ƒê√£ ${gift.active ? "b·∫≠t" : "t·∫Øt"} khuy·∫øn m√£i`, gift });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
