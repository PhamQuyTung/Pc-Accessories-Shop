// app/controllers/promotionGiftController.js
const PromotionGift = require("../models/promotionGift");
const Product = require("../models/product");

/* ============================================================
   üß© Helper functions
============================================================ */
const populateGift = [
  { path: "conditionProducts", select: "name price images slug" },
  { path: "relatedProducts", select: "name price images slug" },
];

const validateGiftData = (body) => {
  const {
    title,
    discountType,
    discountValue,
    conditionProducts,
    relatedProducts,
  } = body;

  if (
    !title ||
    !discountType ||
    !Array.isArray(conditionProducts) ||
    !conditionProducts.length ||
    !Array.isArray(relatedProducts) ||
    !relatedProducts.length
  ) {
    return "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc";
  }

  const value = Number(discountValue);
  if (isNaN(value) || value <= 0) return "Gi√° tr·ªã gi·∫£m kh√¥ng h·ª£p l·ªá";

  if (!["percent", "amount"].includes(discountType))
    return "Lo·∫°i gi·∫£m gi√° kh√¥ng h·ª£p l·ªá";

  if (discountType === "percent" && value > 100)
    return "Gi·∫£m ph·∫ßn trƒÉm kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100%";

  return null; // h·ª£p l·ªá
};

/* ============================================================
   üîß Helper x·ª≠ l√Ω logic chung
============================================================ */
const checkProducts = async (conditionProducts, relatedProducts) => {
  const [mains, related] = await Promise.all([
    Product.find({ _id: { $in: conditionProducts } }),
    Product.find({ _id: { $in: relatedProducts } }),
  ]);

  if (!mains.length) throw new Error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ch√≠nh");
  if (!related.length) throw new Error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m mua k√®m");

  return { mains, related };
};

const validateDiscount = (discountType, discountValue, related) => {
  const value = Number(discountValue);
  if (discountType === "amount") {
    const minPrice = Math.min(...related.map((r) => r.price));
    if (value > minPrice)
      throw new Error(
        `Gi√° tr·ªã gi·∫£m (${value.toLocaleString(
          "vi-VN"
        )}‚Ç´) v∆∞·ª£t qu√° gi√° s·∫£n ph·∫©m th·∫•p nh·∫•t (${minPrice.toLocaleString(
          "vi-VN"
        )}‚Ç´)`
      );
  }
};

/* ============================================================
   üì¶ L·∫•y danh s√°ch t·∫•t c·∫£ khuy·∫øn m√£i qu√† t·∫∑ng
============================================================ */
exports.list = async (req, res) => {
  try {
    const gifts = await PromotionGift.find().populate(populateGift);
    res.json(gifts);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================
   ‚ûï CREATE - Refactor g·ªçn g√†ng, d√πng helper & auto link
============================================================ */
exports.create = async (req, res) => {
  try {
    // üß© Ki·ªÉm tra d·ªØ li·ªáu c∆° b·∫£n
    const error = validateGiftData(req.body);
    if (error) return res.status(400).json({ message: error });

    const {
      title,
      description,
      discountType,
      discountValue,
      conditionProducts,
      relatedProducts,
      link,
    } = req.body;

    // üîç Ki·ªÉm tra t·ªìn t·∫°i s·∫£n ph·∫©m
    const { related } = await checkProducts(conditionProducts, relatedProducts);

    // ‚öôÔ∏è Ki·ªÉm tra h·ª£p l·ªá gi·∫£m gi√°
    validateDiscount(discountType, discountValue, related);

    // ‚úÖ T·∫°o m·ªõi khuy·∫øn m√£i
    const gift = await PromotionGift.create({
      title: title.trim(),
      description: description || "",
      discountType,
      discountValue: Number(discountValue),
      conditionProducts,
      relatedProducts,
      link: link?.trim() || "",
      createdBy: req.user?._id,
    });

    // üîó N·∫øu ch∆∞a c√≥ link, t·ª± ƒë·ªông t·∫°o link theo _id
    if (!gift.link) {
      gift.link = `http://localhost:3000/promotion/${gift._id}`;
      await gift.save();
    }

    // üîÑ Populate d·ªØ li·ªáu tr·∫£ v·ªÅ
    const populated = await gift.populate(populateGift);
    res.status(201).json(populated);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================ 
   ‚úèÔ∏è C·∫≠p nh·∫≠t khuy·∫øn m√£i qu√† t·∫∑ng (Refactor)
============================================================ */
exports.update = async (req, res) => {
  try {
    const { id } = req.params;
    const gift = await PromotionGift.findById(id);
    if (!gift)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i" });

    // üß© Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    const error = validateGiftData(req.body);
    if (error) return res.status(400).json({ message: error });

    const {
      title,
      description,
      discountType,
      discountValue,
      conditionProducts,
      relatedProducts,
      link,
    } = req.body;

    // üîç Ki·ªÉm tra s·∫£n ph·∫©m b·∫±ng helper
    const { related } = await checkProducts(conditionProducts, relatedProducts);

    // ‚öôÔ∏è Ki·ªÉm tra gi·∫£m gi√° h·ª£p l·ªá
    validateDiscount(discountType, discountValue, related);

    // ‚úÖ G√°n d·ªØ li·ªáu m·ªõi v√†o b·∫£n ghi
    Object.assign(gift, {
      title: title.trim(),
      description: description || "",
      discountType,
      discountValue: Number(discountValue),
      conditionProducts,
      relatedProducts,
      link: link?.trim() || "",
    });

    // üîó N·∫øu link ƒëang tr·ªëng ‚Üí t·ª± t·∫°o m·ªõi theo _id
    if (!gift.link) {
      gift.link = `http://localhost:3000/promotion/${gift._id}`;
    }

    await gift.save();

    // üîÑ Populate ƒë·ªÉ tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
    const populated = await gift.populate(populateGift);
    res.json(populated);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================
   üóëÔ∏è Xo√° khuy·∫øn m√£i qu√† t·∫∑ng
============================================================ */
exports.remove = async (req, res) => {
  try {
    const { id } = req.params;
    const gift = await PromotionGift.findById(id);
    if (!gift)
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i qu√† t·∫∑ng" });

    await gift.deleteOne();
    res.json({ message: "ƒê√£ xo√° khuy·∫øn m√£i qu√† t·∫∑ng" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================
   üîç L·∫•y khuy·∫øn m√£i qu√† t·∫∑ng theo productId
============================================================ */
exports.byProduct = async (req, res) => {
  try {
    const { productId } = req.params;

    const gifts = await PromotionGift.find({
      conditionProducts: productId, // ‚úÖ fix: ƒë√∫ng v·ªõi schema
      active: true,
    }).populate(populateGift);

    res.json(gifts || []);
  } catch (err) {
    console.error("L·ªói khi l·∫•y khuy·∫øn m√£i:", err);
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================
   üîÑ B·∫≠t/t·∫Øt tr·∫°ng th√°i khuy·∫øn m√£i
============================================================ */
exports.toggleActive = async (req, res) => {
  try {
    const { id } = req.params;
    const gift = await PromotionGift.findById(id);
    if (!gift)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i" });

    gift.active = !gift.active;
    await gift.save();

    res.json({ message: `ƒê√£ ${gift.active ? "b·∫≠t" : "t·∫Øt"} khuy·∫øn m√£i`, gift });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

/* ============================================================
   üßÆ √Åp d·ª•ng gi·∫£m gi√° theo gi·ªè h√†ng
============================================================ */
/* ============================================================
   üßÆ √Åp d·ª•ng gi·∫£m gi√° theo gi·ªè h√†ng (phi√™n b·∫£n GearVN logic)
============================================================ */
exports.applyCart = async (req, res) => {
  try {
    const { cartItems } = req.body; // [{ product_id, quantity, createdAt }]
    if (!Array.isArray(cartItems) || cartItems.length === 0)
      return res.json({ discounts: [], totalDiscount: 0 });

    // üîç L·∫•y t·∫•t c·∫£ promotion ƒëang active
    const promotions = await PromotionGift.find({ active: true }).populate([
      { path: "conditionProducts", select: "_id name price" },
      { path: "relatedProducts", select: "_id name price" },
    ]);

    let discounts = [];
    let totalDiscount = 0;

    // üëâ S·∫Øp x·∫øp cartItems theo th·ªùi gian th√™m ƒë·ªÉ ∆∞u ti√™n gi·∫£m cho s·∫£n ph·∫©m th√™m s·ªõm h∆°n
    const sortedCartItems = [...cartItems].sort(
      (a, b) => new Date(a.createdAt) - new Date(b.createdAt)
    );

    // =========================================================
    // Duy·ªát t·ª´ng ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i
    // =========================================================
    for (const promo of promotions) {
      const conditionIds = promo.conditionProducts.map((p) => p._id.toString());
      const relatedIds = promo.relatedProducts.map((p) => p._id.toString());

      // ƒê·∫øm t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ch√≠nh v√† s·∫£n ph·∫©m li√™n quan trong gi·ªè
      const mainCount = sortedCartItems
        .filter((i) => conditionIds.includes(i.product_id))
        .reduce((sum, i) => sum + i.quantity, 0);

      const relatedItems = sortedCartItems.filter((i) =>
        relatedIds.includes(i.product_id)
      );

      if (mainCount === 0 || relatedItems.length === 0) continue;

      // S·ªë l∆∞·ª£ng c·∫∑p ƒë·ªß ƒëi·ªÅu ki·ªán gi·∫£m
      let eligiblePairs = mainCount;

      // =========================================================
      // √Åp d·ª•ng cho t·ª´ng s·∫£n ph·∫©m li√™n quan (c√≥ th·ªÉ nhi·ªÅu lo·∫°i)
      // =========================================================
      for (const item of relatedItems) {
        if (eligiblePairs <= 0) break; // H·∫øt l∆∞·ª£t gi·∫£m

        const relatedProduct = promo.relatedProducts.find(
          (p) => p._id.toString() === item.product_id
        );
        if (!relatedProduct) continue;

        const unitPrice = relatedProduct.price;

        // ‚úÖ S·ªë l∆∞·ª£ng ƒë∆∞·ª£c gi·∫£m v√† kh√¥ng ƒë∆∞·ª£c gi·∫£m
        const discountedQty = Math.min(item.quantity, eligiblePairs);
        const normalQty = Math.max(item.quantity - discountedQty, 0);

        // ‚úÖ T√≠nh s·ªë ti·ªÅn gi·∫£m
        let discountAmount = 0;
        if (promo.discountType === "percent") {
          discountAmount = (unitPrice * promo.discountValue) / 100;
        } else {
          discountAmount = promo.discountValue;
        }

        const totalItemDiscount = discountAmount * discountedQty;

        // ‚úÖ Push th√¥ng tin v√†o m·∫£ng
        discounts.push({
          productId: item.product_id,
          discountPerItem: discountAmount,
          totalDiscount: totalItemDiscount,
          promotionTitle: promo.title,
          discountedQty,
          normalQty,
        });

        totalDiscount += totalItemDiscount;

        // Gi·∫£m s·ªë l∆∞·ª£t ƒë·ªß ƒëi·ªÅu ki·ªán c√≤n l·∫°i
        eligiblePairs -= discountedQty;
      }
    }

    // =========================================================
    // Tr·∫£ k·∫øt qu·∫£
    // =========================================================
    return res.json({ discounts, totalDiscount });
  } catch (err) {
    console.error("‚ùå applyCart error:", err);
    return res.status(500).json({ message: err.message });
  }
};
